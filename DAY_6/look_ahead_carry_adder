
module look_ahead_carry_adder(
input [3:0] a,
input [3:0] b,
input cin,
output [3:0] sum,
output cout
    );
    
    wire [3:0] G ; // generate
    wire [3:0] P ; // propagate
    wire [3:0] C ; // internal carries
    
    // Generate and propagate signal
    assign G = a & b;
    assign P = a ^ b;
    
    // carry lookahead logic 
    assign C[0] = cin;
    assign C[1] = G[0] | (P[0] & C[0]);
    assign C[2] = G[1] | (P[1] & G[0]) | (P[1] & P[0] & C[0]);
    assign C[3] = G[2] | (P[2] & G[1]) | (P[2] & P[1] & G[0]) | (P[2] & P[1] & P[0] & C[0]);

    // Final Carry Out
    assign cout = G[3] | (P[3] & C[3]);
    
    // Sum calculation
    assign sum = P ^ C;
    
endmodule
